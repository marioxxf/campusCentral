@inject MiddlewareForUseSessionVariables middlewareForSessionUse
@{
    ViewData["Title"] = "Home Page";
    var session = middlewareForSessionUse._httpContextAccessor.HttpContext.Session;
    var userAccountNameLogged = "";
    var userAccountIdLogged = "";
    if (session.GetString("UserAccountNameLogged") != null)
    {
        userAccountNameLogged = session.GetString("UserAccountNameLogged");
        userAccountIdLogged = session.GetString("UserAccountIdLogged");
    }
}

<div id="selectCourseArea" name="selectCourseArea">
    <div class="mainDiv" id="mainDiv1" name="mainDiv1">
        <div class="enrollmentSection">
            <label class="enrollmentTitle">Escolha um dos cursos abaixo e faça sua matrícula</label><br />
            <div class="courseDisplay" id="courseDisplay" name="courseDisplay">
            </div>
            <input class="btnGioiano" type="button" value="Avançar" id="btnForStep2" name="btnForStep2" onclick="toStep2()">
        </div>
    </div>
</div>

<div class="topicAreaForEnrollment" id="topicAreaForEnrollment" name="topicAreaForEnrollment">
    <div class="mainDiv" id="mainDiv2" name="mainDiv2">
        <label class="enrollmentTitle">Abaixo, as matérias disponíveis para matrícula, referente ao curso escolhido:</label>
        <div class="topicDisplay" id="topicDisplay" name="topicDisplay">
        </div>
        <label class="enrollmentTitle">Você quer estudar em qual período?</label>
        <div class="periodTypeScheduledBtnsArea">
            <div>
                <input class="btnGioiano" type="button" id="btnMatutino" name="btnMatutino" value="Matutino" onclick="sendTopicScheduleTimesTopicDivs(this.value); checkRulesForPassToStep3();">
            </div>
            <div>
                <input class="btnGioiano" type="button" id="btnNoturno" name="btnNoturno" value="Noturno" onclick="sendTopicScheduleTimesTopicDivs(this.value); checkRulesForPassToStep3();">
            </div>
        </div>
        <br />
        <input class="btnGioiano btnGioianoDisabled" type="button" value="Confirmar solicitação de matrícula" id="btnForStep3" name="btnForStep3" onclick="toStep3()">
    </div>
    
</div>
<input type="hidden" id="totalTopicsCreated" name="totalTopicsCreated" value="0" />
<input type="hidden" id="saveCourseIdSelected" name="saveCotopicPeriodurseIdSelected" value="0" />
<input type="hidden" id="totalCoursesLoaded" name="totalCoursesLoaded" value="0" />
<a class="dropdown-item" data-bs-toggle="modal" href="#" data-bs-target="#modalForFinalStep" style="display:none;" id="btnForFinalModal" name="btnForFinalModal">For open modal</a>

<!-- Modal -->
<div class="modal fade" id="modalForFinalStep" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Confirme sua solicitação de matrícula abaixo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body modalBodyGioiano">
                <div class="modalForFinalStepAtEnrollmentProccess">
                    <h1 class="modalForFinalStepAtEnrollmentProcessTitle"><b class="modalForFinalStepAtEnrollmentProcessTitleWarn">Tem certeza</b> que deseja confirmar a solicitação da matrícula <b class="modalForFinalStepAtEnrollmentProcessTitleWarn2">abaixo</b>? <b class="modalForFinalStepAtEnrollmentProcessTitleWarn">Verifique</b> antes de confirmar.</h1>
                </div>
                <div class="finalEnrollmentListArea">
                    <table id="tableForFinalEnrollmentList" name="tableForFinalEnrollmentList" class="table tableGioiano">
                        <thead>
                            <tr>
                                <th>Dia da semana</th>
                                <th>Horário</th>
                                <th>Disciplina</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                        <tfoot>
                            <tr>
                                <td>Relação final das matérias pré-matriculadas</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var forEnrollment = [];
    var topicsByCourseSelected = [];
    var listOfTopicScheduleTimes = [];
    var checkIfTypePeriodScheduleHasBeenChoosed = "notPicked";
    var checkIfTypePeriodScheduleHasBeenChoosed2 = "notPicked";
    $(document).ready(function () {
        loadCourses();
    });

    function sendTopicScheduleTimesTopicDivs(periodTypeChosed){
        if (periodTypeChosed == "Matutino") {
            document.getElementById('btnMatutino').className = "btnGioiano btnGioianoDisabled";
            document.getElementById('btnNoturno').className = "btnGioiano";
        } else {
            document.getElementById('btnNoturno').className = "btnGioiano btnGioianoDisabled";
            document.getElementById('btnMatutino').className = "btnGioiano";
        }
        for(var n = 0; n < listOfTopicScheduleTimes.length; n++){
            if (listOfTopicScheduleTimes[n].periodTypeScheduled == periodTypeChosed){
                document.getElementById('topicPeriod' + listOfTopicScheduleTimes[n].topicId).textContent = "";
                document.getElementById('topicPeriod' + listOfTopicScheduleTimes[n].topicId).innerHTML = listOfTopicScheduleTimes[n].startTime.replace(":", "h").substr(0, 5) + " às " + listOfTopicScheduleTimes[n].endTime.replace(":", "h").substr(0, 5);
                document.getElementById('dayTitle' + listOfTopicScheduleTimes[n].topicId).innerHTML = listOfTopicScheduleTimes[n].day;
            }
        }
    }

    function toStep2(){
        var courseIdSelected = document.getElementById('saveCourseIdSelected').value;
        if(courseIdSelected == "0"){
            alert("Escolha um dos cursos para prosseguir, por favor.");
        } else {
            const step2Div = document.getElementById("topicAreaForEnrollment");
            step2Div.style.opacity = "1";
            step2Div.style.pointerEvents = "auto";

            const step1Div = document.getElementById("selectCourseArea");
            step1Div.style.opacity = "0.3";
            step1Div.style.pointerEvents = "none";
            loadTopicsByCourseAndSemAvailability(courseIdSelected, 1);
        }
    }

    function toStep3(){
        var table = document.getElementById("tableForFinalEnrollmentList"); // seleciona a tabela pelo id
        var rows = table.getElementsByTagName("tr"); // seleciona todas as linhas da tabela

        for (var i = rows.length - 1; i > 0; i--) { // remove as linhas do tbody, começando pela última
            rows[i].parentNode.removeChild(rows[i]); 
        }

        btnForFinalModal.click();
        // Crie um array com 7 itens, cada item representa uma aula.
        var forEnrollmentFinalList = forEnrollment;

        // Obtenha uma referência à tabela HTML pelo ID.
        var tabela = document.getElementById("tableForFinalEnrollmentList");

        // Percorra o array de aulas e adicione uma nova linha para cada item na tabela.
        for (var i = 0; i < forEnrollmentFinalList.length; i++) {
            var aula = forEnrollmentFinalList[i];
            var novaLinha = tabela.insertRow(-1);
            var novaColuna1 = novaLinha.insertCell(0);
            var novaColuna2 = novaLinha.insertCell(1);
            var novaColuna3 = novaLinha.insertCell(2);
            var topicIdForEnrollmentFinalList = 0;

            for(var x = 0; x < topicsByCourseSelected.length; x++){
                if (topicsByCourseSelected[x].name == aula.TopicNameAssigned) {
                    topicIdForEnrollmentFinalList  = topicsByCourseSelected[x].topicId;
                }
            }
            novaColuna1.innerHTML = document.getElementById('dayTitle' + topicIdForEnrollmentFinalList).textContent;
            novaColuna2.innerHTML = document.getElementById('topicPeriod' + topicIdForEnrollmentFinalList).textContent;
            novaColuna3.innerHTML = aula.TopicNameAssigned;
        }
    }

    function getCourses() {
        return new Promise((resolve, reject) => {
            const settings = {
                "async": true,
                "crossDomain": true,
                "dataType": 'JSON',
                "url": '@Url.Action("GetAllCourses", "Study")',
                "method": "GET"
            };

            $.ajax(settings).done(function (response) {
                resolve(response);
            });
        });
    }

    function saveCourseIdSelected(courseSelected, courseDivId){
        document.getElementById('saveCourseIdSelected').value = courseSelected;
        var totalCoursesInThisView = document.getElementById('totalCoursesLoaded').value;
        for (var j = 0; j < totalCoursesInThisView; j++){
            var div = document.getElementById('courseDiv' + j);
            const divStyle = getComputedStyle(div);
            const backgroundColorOfMyDiv = divStyle.backgroundColor;
            if (backgroundColorOfMyDiv == "rgb(162, 219, 169)") {
                document.getElementById('courseDiv' + j).style.backgroundColor = "#e1e2e3";
                document.getElementById('courseDiv' + j).style.borderColor = "black";
                document.getElementById('courseLabel' + j).style.color = "#474042";
            }
        }
        document.getElementById(courseDivId).style.backgroundColor = "#a2dba9";
        document.getElementById(courseDivId).style.borderColor = "#a2dba9";
        document.getElementById('courseLabel' + getLastNumber(courseDivId)).style.color = "white";
    }

    function getLastNumber(str) {
        const match = str.match(/\d+$/); // procura pelo último número inteiro na string

        if (match) {
            return match[0]; // retorna o número inteiro encontrado
        } else {
            return null; // retorna null se não encontrar nenhum número inteiro na string
        }
    }

    function loadCourses() {
        getCourses().then(result => {
            document.getElementById('totalCoursesLoaded').value = result.length;
            for(var i = 0; i < result.length; i++){
                const divX = document.getElementById('courseDisplay');
                const div = document.createElement('div');
                div.classList.add('courseContainer');
                div.id = "courseDiv" + i;
                div.setAttribute('value', result[i].courseId);
                div.addEventListener('click', function() {
                    saveCourseIdSelected(this.getAttribute('value'), this.getAttribute('id'));
                });
                const label = document.createElement('label');
                label.setAttribute('value', result[i].courseId);
                label.innerText = result[i].name;
                label.id = "courseLabel" + i;
                div.appendChild(label);
                divX.appendChild(div);
            }
        });
    }

    function getTopicsByCourseIdAndSemAvailability(courseIdChosed) {
        return new Promise((resolve, reject) => {
            const settings = {
                "async": true,
                "crossDomain": true,
                "dataType": 'JSON',
                "url": '@Url.Action("GetTopicsByCourseIdAndBySemesterAvailability", "Study")',
                "method": "GET",
                "data": { 'courseId': courseIdChosed, 'semesterAvailability': 1 }
            };

            $.ajax(settings).done(function (response) {
                resolve(response);
            });
        });
    }

    function getYearAndSemester() {
        const today = new Date();
        const year = today.getFullYear();
        const semester = today.getMonth() < 6 ? "1" : "2";
        return year + semester;
    }

    function checkRulesForPassToStep3(){
        const element = document.getElementById("btnMatutino");

        if (element.className.includes("btnGioiano btnGioianoDisabled")) {
            checkIfTypePeriodScheduleHasBeenChoosed = "picked";
        } else {
            checkIfTypePeriodScheduleHasBeenChoosed = "notPicked";
        }
        const element2 = document.getElementById("btnNoturno");

        if (element2.className.includes("btnGioiano btnGioianoDisabled")) {
            checkIfTypePeriodScheduleHasBeenChoosed2 = "picked";
        } else {
            checkIfTypePeriodScheduleHasBeenChoosed2 = "notPicked";
        }

        if (forEnrollment.length < 1) {
            document.getElementById('btnForStep3').className = "btnGioiano btnGioianoDisabled";
        } else if (checkIfTypePeriodScheduleHasBeenChoosed == "notPicked" && checkIfTypePeriodScheduleHasBeenChoosed2 == "notPicked") {
            document.getElementById('btnForStep3').className = "btnGioiano btnGioianoDisabled";
        } else {
            document.getElementById('btnForStep3').className = "btnGioiano";
        }
    }

    function manageEnrollmentList(courseIdOfThisTopic, topicNameChosed) {
        checkRulesForPassToStep3();
        for(var p = 0; p < forEnrollment.length; p++){
            if(forEnrollment[p].TopicNameAssigned == topicNameChosed){
                forEnrollment.splice(p ,1);
                document.getElementById(topicNameChosed).style.backgroundColor = "#e1e2e3";
                document.getElementById(topicNameChosed).style.borderColor = "#e1e2e3";
                if (forEnrollment.length == 0 && checkIfTypePeriodScheduleHasBeenChoosed == "notPicked") {
                    document.getElementById('btnForStep3').className = "btnGioiano btnGioianoDisabled";
                    checkRulesForPassToStep3();
                } else {
                    document.getElementById('btnForStep3').className = "btnGioiano";
                    checkRulesForPassToStep3();
                }
                return;
            }
        }
        var UserAccountCourseScheduleItem = {
            UserAccountId: "@userAccountIdLogged",
            TopicNameAssigned: topicNameChosed,
            TopicTravelStatus: 1,
            TopicFinalScore: 0,
            TopicPeriodAttended: getYearAndSemester(),
            CourseId: courseIdOfThisTopic
        };
        forEnrollment.push(UserAccountCourseScheduleItem);

        checkRulesForPassToStep3();

        document.getElementById(topicNameChosed).style.backgroundColor = "#a2dba9";
        document.getElementById(topicNameChosed).style.borderColor = "#a2dba9";
    }

    function loadTopicsByCourseAndSemAvailability(courseId, semAvailability) {
        getTopicsByCourseIdAndSemAvailability(courseId, semAvailability).then(result => {
            topicsByCourseSelected = result;
            loadTopicScheduleTimesByCourse(courseId);
            for(var i = 0; i < result.length; i++){
                var topicDiv = document.createElement("div");
                topicDiv.className = "topic enrollmentException";

                topicDiv.id = result[i].name;
                topicDiv.addEventListener('click', function () {
                    manageEnrollmentList(document.getElementById('saveCourseIdSelected').value, this.getAttribute('id'));
                });

                var flexDiv = document.createElement("div");
                flexDiv.style.display = "flex";

                var topicInfoDiv = document.createElement("div");
                var topicTitleLabel = document.createElement("label");
                topicTitleLabel.className = "topicTitle";
                topicTitleLabel.textContent = result[i].name;

                var topicPeriodTitle = document.createElement("p");
                topicPeriodTitle.className = "topicPeriodTitle";
                topicPeriodTitle.textContent = "Período ";

                var topicPeriod = document.createElement("b");
                topicPeriod.className = "topicPeriod";
                topicPeriod.textContent = "A definir";
                topicPeriod.id = "topicPeriod" + result[i].topicId;
                topicPeriodTitle.appendChild(topicPeriod);

                var dayTitle = document.createElement("p");
                dayTitle.className = "topicDayTitle";
                dayTitle.textContent = result[i].day;
                dayTitle.id = "dayTitle" + result[i].topicId;

                topicInfoDiv.appendChild(topicTitleLabel);
                topicInfoDiv.appendChild(document.createElement("br"));
                topicInfoDiv.appendChild(document.createElement("br"));
                topicInfoDiv.appendChild(document.createElement("br"));
                topicInfoDiv.appendChild(topicPeriodTitle);
                topicInfoDiv.appendChild(dayTitle);

                var topicAcronymDiv = document.createElement("div");
                var topicAcronymLabel = document.createElement("p");
                topicAcronymLabel.className = "topicAcronym";
                topicAcronymLabel.textContent = result[i].acronym;
                topicAcronymDiv.appendChild(topicAcronymLabel);
                topicAcronymDiv.appendChild(document.createElement("p"));
                topicAcronymDiv.appendChild(document.createElement("br"));

                flexDiv.appendChild(topicInfoDiv);
                flexDiv.appendChild(topicAcronymDiv);

                topicDiv.appendChild(flexDiv);
                document.getElementById("topicDisplay").appendChild(topicDiv);
            }
            document.getElementById('totalTopicsCreated').value = result.length;
        });
    }

    function getTopicScheduleTimesByCourse() {
        return new Promise((resolve, reject) => {
            var courseIdChosed = document.getElementById('saveCourseIdSelected').value;
            const settings = {
                "async": true,
                "crossDomain": true,
                "dataType": 'JSON',
                "url": '@Url.Action("GetTopicScheduleTimesByCourseId", "Study")',
                "method": "GET",
                "data": { 'courseId': courseIdChosed }
            };

            $.ajax(settings).done(function (response) {
                resolve(response);
            });
        });
    }

    function loadTopicScheduleTimesByCourse() {
        getTopicScheduleTimesByCourse().then(result => {
            listOfTopicScheduleTimes = result;
        });
    }
</script>